extends layout

block content
    .row
        .col-12
            ul#myTab.nav.nav-tabs(role='tablist')
                li.nav-item
                    a#control-tab.nav-link.active(data-toggle='tab' href='#control' role='tab' aria-controls='control' aria-selected='true') Control panel
                li.nav-item
                    a#data-tab.nav-link(data-toggle='tab' href='#data' role='tab' aria-controls='data' aria-selected='false') Data viewer
            #myTabContent.tab-content
                #control.tab-pane.fade.show.active(role='tabpanel' aria-labelledby='control-tab')
                    .container
                        
                        .row.my-2
                            .col-12 
                                .form-group.row
                                    label.col-sm-4.col-form-label.font-weight-bold(for='staticEmail') Address of Authority
                                    .col-sm-8
                                        input#staticEmail.form-control-plaintext(type='text' readonly='' value="#{org_address}")                        
                        
                        ul#modeTab.nav.nav-tabs(role="tablist")
                            li.nav-item
                                a#mode1-tab.nav-link.active(data-toggle='tab' href='#mode1' role='tab' aria-controls='control' aria-selected='true') Mode 1
                            li.nav-item
                                a#mode2-tab.nav-link(data-toggle='tab' href='#mode2' role='tab' aria-controls='control' aria-selected='false') Mode 2
                        #modeTabContent.tab-content
                            #mode1.tab-pane.fade.show.active(role='tabpanel' aria-labelledby='mode1-tab')
                                .container.my-2
                                    .row
                                        .col-12
                                            .form-group
                                                label(for='attrFormControlSelect1') Select pre-authorized document
                                                select#attrFormControlSelect1.form-control

                                        .col-12
                                            table.table.table-bordered#org-table
                                                thead
                                                    tr
                                                        th.text-center(scope='col') Index
                                                        th.text-center(scope='col') Address of data provider
                                                        th.text-center(scope='col') Status
                                                tbody

                                    .row
                                        .col-12
                                            .text-right
                                                //- button.btn.btn-primary.auth-btn.mr-2(type='button') 授權
                                                button.btn.btn-primary.mr-2.confirm-btn(type='button' data-toggle='modal', data-target='#infoModal') Auth
                                                button.btn.btn-danger.revoke-btn(type='button') Revoke

                            #mode2.tab-pane.fade(role='tabpanel' aria-labelledby='mode2-tab')
                                .container
                                    .row.my-2
                                        .col-12
                                            table.table.table-bordered#attr-table
                                                thead
                                                    tr
                                                        th.text-center(scope='col') Index
                                                        th.text-center(scope='col') Attribute name
                                                        th.text-center(scope='col') Status
                                                tbody
                                    .row
                                        .col-12
                                            .text-right
                                                //- button.btn.btn-primary.auth-btn.mr-2(type='button') 授權
                                                button.btn.btn-primary.mr-2.confirm-one-approved-btn(type='button' data-toggle='modal', data-target='#infoModal') Auth
                                                button.btn.btn-danger.revoke-one-approved-btn(type='button') Revoke



                        .row.mt-2
                            .col-md-6.col.my-2
                                .card
                                    .card-header
                                        | Total bills
                                    .card-body
                                        h5.total-deposit.text-right.my-1.font-weight-bold
                                        canvas#myDoughnut(width='400' height='400')
                            .col-md-6.col.my-2
                                .card
                                    .card-header
                                        | Pending bills
                                    .card-body
                                        canvas#myLine(width='400' height='400')

                #data.tab-pane.fade(role='tabpanel' aria-labelledby='data-tab') 
                    div(style='overflow-x:auto;')
                        table.mt-2.table.table-striped
                            thead
                                tr
                                    th(scope='col') Address of org
                                    th(scope='col') Created at
                                    th(scope='col') Updated at
                            tbody
                                each val, idx in tokens
                                    tr
                                        td #{val.org}
                                        td #{val.createdAt}
                                        td #{val.updatedAt}
                    div
                        button.btn.btn-info.request-token-btn(type='button') Get Token
                    br



    #infoModal.modal.fade(tabindex='-1' role='dialog' aria-hidden='true')
        .modal-dialog(role='document')
            .modal-content
                .modal-header
                    h5.modal-title Notification
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') ×
                .modal-body
                    | Do you want to authorize
                    span.font-weight-bold
                        | Current TSP
                    | Store info in the institutions below?
                    .confirm-list.font-weight-bold
                .modal-footer
                    button.btn.btn-secondary(type='button' data-dismiss='modal') Cancel
                    button.btn.btn-info.auth-btn(type='button' data-dismiss='modal') Confirm
                    button.btn.btn-primary.auth-one-approved-btn(type='button' data-dismiss='modal') Confirm


    script. 
        $(function() {
            let account = "";
            let contract_address = "#{address}";
            let target_address = "#{org_address}";
            let selectAttr = "";                            
            let org_mapping = JSON.parse("#{org_mapping}".replace(/&quot;/g,'"'));
            window.ethereum.on('accountsChanged', function(accounts) {
                account = accounts[0];
                $(".account").html("Account:" + account);    
                $(".func4-input1").val(account);
            });

            $.getScript( "/javascripts/web3_bundle.js", async function(data, textStatus, jqxhr) {
                let data_org, data_acc;
                let contractAccInstance;
                let contractOrgInstance;
            
                $.when(
                    $.getJSON('/contracts/OrganizationManager.json', function(data) {
                        data_org = data;
                    }),
                    $.getJSON('/contracts/AccessManager.json', function(data) {
                        data_acc = data;
                    })
                ).done(function() {
                    web3.eth.getAccounts().then((accounts) => {
                        account = accounts[0];
                    });

                    contractOrgInstance = new web3.eth.Contract(data_org.abi, contract_address);

                    contractOrgInstance.methods.getOrgList().call({from: account})
                    .then( (result) => { // orgList
                        //- alert(`Index: 0, Address: ${result}`);
                        console.log(`Index: 0, Org Address: ${result}`);

                        contractOrgInstance.methods.getAccessManagerAddress(account).call({from: account})
                        .then( (r) => {
                            contractAccInstance = new web3.eth.Contract(data_acc.abi, r);
                            console.log("accMgr:"+r);
                            contractAccInstance.methods.owner().call({from: account})
                            .then( (r) => {
                                console.log("owner:"+r);
                            });
                        })
                        .then(async () => {
                            // Get Attribute List and pick first attr up
                            await contractOrgInstance.methods.getAttrList().call()
                            .then( (r) => {
                                for (let i = 0; i < r.length; ++i) {
                                    if (i === 0) {
                                        $("#attrFormControlSelect1").append(new Option(r[i], r[i], true, true));
                                        selectAttr = r[i];
                                    }
                                    else
                                        $("#attrFormControlSelect1").append(new Option(r[i], r[i]));
                                }
                            });

                            // For initial attribute in mode 1
                            for (let i = 0; i < result.length; ++i) {
                                if (result[i] == target_address) continue;
                                let fullName = org_mapping["0x"+result[i].substr(2)];
                                console.log(`org full name: ${fullName}`)
                                contractAccInstance.methods.validatePermission(selectAttr, target_address, result[i]).call({from: account})
                                .then( (r) => {
                                    console.log(`validatePermission result: ${r}`);
                                    $("#org-table>tbody").append(`
                                        <tr>
                                            <td>
                                                <div class="custom-control custom-checkbox text-center">
                                                    <input class="custom-control-input" id="customCheck${i}" type="checkbox" value="${result[i]}" name="orgAddress"/>
                                                    <label class="custom-control-label" for="customCheck${i}"></label>
                                                </div>
                                            </td>
                                            <td class="text-center">${fullName}</td>
                                            <td class="text-center">`+
                                            (r == false ? `<i class="fas fa-lock"></i>` : `<i class="fas fa-lock-open"></i>`)
                                            +`</td>
                                        </tr>
                                    `);
                                });
                            }

                            // Add event for dynamic switch to current selected attribute
                            $("#attrFormControlSelect1").on('change', (e) => {
                                selectAttr = e.target.value;
                                $("#org-table>tbody").empty();
                                for (let i = 0; i < result.length; ++i) {
                                    if (result[i] == target_address) continue;
                                    let fullName = org_mapping["0x"+result[i].substr(2)];
                                    contractAccInstance.methods.validatePermission(selectAttr, target_address, result[i]).call({from: account})
                                    .then( (r) => {
                                        console.log(r);
                                        $("#org-table>tbody").append(`
                                            <tr>
                                                <td>
                                                    <div class="custom-control custom-checkbox text-center">
                                                        <input class="custom-control-input" id="customCheck${i}" type="checkbox" value="${result[i]}" name="orgAddress"/>
                                                        <label class="custom-control-label" for="customCheck${i}"></label>
                                                    </div>
                                                </td>
                                                <td class="text-center">${fullName}</td>
                                                <td class="text-center">`+
                                                (r == false ? `<i class="fas fa-lock"></i>` : `<i class="fas fa-lock-open"></i>`)
                                                +`</td>
                                            </tr>
                                        `);
                                    });
                                }
                            });

                            // Get "One approved All bank open"
                            await contractOrgInstance.methods.getOneApprovedAttrsList().call()
                            .then( async (r) => {
                                for (let i = 0; i < r.length; ++i) {
                                    await contractAccInstance.methods.validateOneApproved(r[i]).call()
                                    .then( (res) => {
                                        $("#attr-table>tbody").append(`
                                            <tr>
                                                <td>
                                                    <div class="custom-control custom-checkbox text-center">
                                                        <input class="custom-control-input" id="attrCheck${i}" type="checkbox" value="${r[i]}" name="oneApprovedAttrs"/>
                                                        <label class="custom-control-label" for="attrCheck${i}"></label>
                                                    </div>
                                                </td>
                                                <td class="text-center">${r[i]}</td>
                                                <td class="text-center">`+
                                                (res == false ? `<i class="fas fa-lock"></i>` : `<i class="fas fa-lock-open"></i>`)
                                                +`</td>
                                            </tr>
                                        `);
                                    });
                                }
                            });

                        });
                    })
                    .catch( (err) => {
                        alert(err);
                    });

                    $(".confirm-btn").on("click", function(e) {
                        let selected = [];
                        let fullName = "";
                        $(".confirm-list").html("");
                        $.each($("input[name=orgAddress]:checked"), function() {
                            selected.push($(this).val());
                            fullName = org_mapping["0x"+($(this).val()).substr(2)];
                            $(".confirm-list").html($(".confirm-list").html()+"<br>"+fullName);
                        });
                        $(".auth-one-approved-btn").hide();
                        $(".auth-btn").show();
                    });
                    
                    $(".confirm-one-approved-btn").on("click", function(e) {
                        let selected = [];
                        $(".confirm-list").html("");
                        $.each($("input[name=oneApprovedAttrs]:checked"), function() {
                            selected.push($(this).val());
                            $(".confirm-list").html($(".confirm-list").html()+"<br>"+$(this).val());
                        });
                        $(".auth-one-approved-btn").show();
                        $(".auth-btn").hide();
                    });

                    $(".auth-btn").on("click", function(e) {
                        $(".confirm-list").html("");
                        let selected = []
                        $.each($("input[name=orgAddress]:checked"), function() {
                            selected.push($(this).val());
                        });
                        
                        for (let i = 0; i < selected.length; i++) {
                            if (i === selected.length-1) {
                                contractAccInstance.methods.authorizeAccess(selectAttr, target_address, selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })
                                .on('receipt', function(receipt){
                                    console.log(`receipt:`, receipt);
                                    console.log(`log got:`, receipt.events.AccessAuthorization.returnValues);
                                    alert("Authorize done!");
                                    location.reload()
                                })
                            }
                            else {
                                contractAccInstance.methods.authorizeAccess(selectAttr, target_address, selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })                                
                            }
                        }
                    });

                    $(".auth-one-approved-btn").on("click", function(e) {
                        $(".confirm-list").html("");
                        let selected = [];
                        $.each($("input[name=oneApprovedAttrs]:checked"), function() {
                            selected.push($(this).val());
                        });
                        for (let i = 0; i < selected.length; i++) {
                            if (i === selected.length-1) {
                                contractAccInstance.methods.authorizeAll(selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })
                                .on('receipt', function(receipt){
                                    console.log(`receipt:`, receipt);
                                    console.log(`log got:`, receipt.events.ApprovedAuthorization.returnValues);
                                    alert("Authorize attributes done!");
                                    location.reload()
                                })                                
                            }
                            else {
                                contractAccInstance.methods.authorizeAll(selected[i]).send({from: account})                                
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })                                
                            }
                        }
                    });

                    $(".revoke-btn").on("click", function(e) {
                        let selected = []
                        $.each($("input[name=orgAddress]:checked"), function() {
                            selected.push($(this).val());
                        });
                        
                        for (let i = 0; i < selected.length; i++) {
                            if (i === selected.length-1) {
                                contractAccInstance.methods.revokeAccess(selectAttr, target_address, selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })
                                .on('receipt', function(receipt){
                                    console.log(`receipt:`, receipt);
                                    console.log(`log got:`, receipt.events.AccessRevocation.returnValues);
                                    alert("Revoke done!");
                                    location.reload()
                                })
                            }
                            else {
                                contractAccInstance.methods.revokeAccess(selectAttr, target_address, selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })                                
                            }
                        }                        
                    });

                    $(".revoke-one-approved-btn").on("click", function(e) {
                        let selected = [];
                        $.each($("input[name=oneApprovedAttrs]:checked"), function() {
                            selected.push($(this).val());
                        });
                        for (let i = 0; i < selected.length; i++) {
                            if (i === selected.length-1) {
                                contractAccInstance.methods.revokeAll(selected[i]).send({from: account})
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })
                                .on('receipt', function(receipt){
                                    console.log(`receipt:`, receipt);
                                    console.log(`log got:`, receipt.events.ApprovedRevocation.returnValues);
                                    alert("Revoke attributes done!");
                                    location.reload()
                                })                                
                            }
                            else {
                                contractAccInstance.methods.revokeAll(selected[i]).send({from: account})                                
                                .on('transactionHash', function(hash){
                                    console.log(`${i} transactionHash: ${hash}.`);                            
                                })                                
                            }
                        }                       
                    });

                    $(".request-token-btn").on("click", function(e) {
                        contractOrgInstance.methods.getOrgList().call({from: account})
                        .then( (result) => { // orgList
                            let validList = [];
                            contractOrgInstance.methods.getAccessManagerAddress(account).call({from: account})
                            .then( (r) => {
                                contractAccInstance = new web3.eth.Contract(data_acc.abi, r);
                                console.log("accMgr:"+r);
                                contractAccInstance.methods.owner().call({from: account})
                                .then( (r) => {
                                    console.log("owner:"+r);
                                });
                            })
                            .then( async () => {                                
                                for (let i = 0; i < result.length; ++i) {
                                    if (target_address === result[i]) continue;
                                    validList.push(result[i]);
                                    //- await contractAccInstance.methods.validatePermission(selectAttr, target_address, result[i]).call({from: account})
                                    //- .then( (r) => {
                                    //-     if (r) {
                                    //-         console.log(result[i]);
                                    //-         validList.push(result[i].toUpperCase());                                    
                                    //-     }
                                    //- });
                                }
                                alert("Ready to request token.");
                                let hashed = await contractOrgInstance.methods.getId().call({from: account})
                                $.ajax({
                                    url: '/dataSharing/getAccessToken',
                                    type: 'get',
                                    cache: false,
                                    data: {
                                        provider_address: validList,
                                        hashed: hashed
                                    },
                                    success: (res) => {
                                        alert(res.msg);
                                        location.reload();
                                    },
                                    error: (e) => {
                                        alert(e);
                                        console.log(e);
                                    }
                                });
                            })
                        })
                        .catch( (err) => {
                            alert(err);
                        });
                    });

                    // Calculate balance
                    let deposit = [#{user.balance}];
                    //- let orgs = ["#{org_address}".substr(0,5)];
                    let orgs = [org_mapping["0x"+"#{org_address}".substr(2)]];
                    


                    let a = JSON.parse("#{data}".replace(/&quot;/g,'"'));
                    let b = JSON.parse("#{orgs}".replace(/&quot;/g,'"'));
                    let total = 0;
                    for (let i = 0; i < a.length; ++i) {
                        deposit.push(a[i]);
                        //- orgs.push(b[i]);
                        orgs.push(org_mapping["0x"+b[i].substr(2)]);
                    }

                    total = deposit.reduce((a,b)=>parseInt(a, 0)+parseInt(b,0));
                    $(".total-deposit").html("NT$&nbsp"+total.toLocaleString('en-US'));
                    // End calculate balance

                    // Calculate invoice
                    let onlyUnique = (v, idx, self) => {
                        return self.indexOf(v) === idx;
                    }

                    let date = JSON.parse("#{date}".replace(/&quot;/g,'"'));
                    let invoiceTotal = JSON.parse("#{total}".replace(/&quot;/g,'"'));
                    let resOrg = JSON.parse("#{resOrg}".replace(/&quot;/g,'"'));
                    //- let date = ["202103", "202104", "202103", "202103", "202103", "202105"];
                    //- let invoiceTotal = [10, 25, 30, 21, 31, 8];
                    //- let resOrg = ["0x123", "0x234", "0x123", "0x123", "0x456", "0x234"];

                    console.log(date);
                    console.log(invoiceTotal);
                    console.log(resOrg);

                    let mm = new Map();
                    for (let i = 0; i < date.length; ++i) {
                        if (mm[date[i]] !== undefined) mm[date[i]] += invoiceTotal[i];
                        else mm[date[i]] = invoiceTotal[i];
                    }
                    let uniqueDate = [];
                    let invoiceTotalByDate = [];
                    for (let i in mm) {
                        uniqueDate.push(i);
                        invoiceTotalByDate.push(mm[i]);
                    }

                    let uniqueOrg = resOrg.filter(onlyUnique);
                    let orgTotalDataset = [];
                    for (let i = 0; i < uniqueOrg.length; ++i) {
                        // inital 
                        let tmp = [];
                        for (let j = 0; j < uniqueDate.length; ++j) {
                            tmp.push(0);
                        }

                        // calculate
                        for (let k = 0; k < invoiceTotal.length; k++) {
                            for (let m = 0; m < uniqueDate.length; m++) {
                                if (uniqueDate[m] === date[k] && resOrg[k] == uniqueOrg[i]) {
                                    tmp[m] += invoiceTotal[k];
                                }
                            }
                        }

                        // push into dataset
                        orgTotalDataset.push(tmp);
                    }

                    orgTotalDataset.push(invoiceTotalByDate);

                    // replace with fullname
                    for (let i = 0; i < uniqueOrg.length; ++i) {
                        uniqueOrg[i] = org_mapping["0x"+uniqueOrg[i].substr(2)];
                    }


                    uniqueOrg.push("Total billing amount");
                    // End calculate invoice

                    if ("#{errorMsg}" !== "") alert("#{errorMsg}");

                    // chart
                    var ctx1 = document.getElementById("myDoughnut").getContext('2d');
                    var myDoughnutChart = new Chart(ctx1, {
                        type: "doughnut",
                        data: {
                            datasets: [
                                {
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.2)',
                                        'rgba(54, 162, 235, 0.2)',
                                        'rgba(255, 206, 86, 0.2)',
                                        'rgba(75, 192, 192, 0.2)',
                                        'rgba(153, 102, 255, 0.2)',
                                        'rgba(255, 159, 64, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(255,99,132,1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1,
                                    hoverBorderWidth: 4,
                                    data: deposit
                                }
                            ],

                            // These labels appear in the legend and in the tooltips when hovering different arcs
                            labels: orgs
                        },
                        options: {}
                    });

                    let bcolor = [
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(254, 67, 101, 1)'
                    ];
                    let ds = [];
                    for (let i = 0; i < uniqueOrg.length; i++) {
                        ds.push({
                            label: uniqueOrg[i],
                            backgroundColor: ['rgba(0, 0, 0, 0)'],
                            borderColor:[bcolor[i]],
                            borderWidth: 1,
                            data: orgTotalDataset[i]
                        });
                    }

                    var ctx2 = document.getElementById("myLine").getContext('2d');
                    var myLineChart = new Chart(ctx2, {
                        type: "line",
                        data: {
                            datasets: ds ,
                            // These labels appear in the legend and in the tooltips when hovering different arcs
                            labels: uniqueDate
                        },
                        options: {
                            elements: {
                                line: {
                                    tension: 0 // 禁用贝塞尔曲线
                                }
                            },
                            scales: {
                                //- yAxes: [{
                                //-     ticks: { min: 0, max: 30}
                                //- }]
                            }

                        }
                    });
                });
            });
        });
